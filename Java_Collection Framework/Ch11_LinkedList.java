//	< ArrayList 장/단점 >
//
//	장점	 :	배열은 구조가 간단하고 데이터를 읽는 데 걸리는 시간(접근시간, access time)이 짧다.
//
//	단점	1. 크기를 변경할 수 없다.
//		 	=>	크기를 변경해야 하는 경우 새로운 배열을 생성 후 데이터를 복사해야함.
//		 	=>	크기 변경을 피하기 위해 충분히 큰 배열을 생성하면, 메모리가 낭비됨
//
//	단점2. 비순차적인 데이터의 추가, 삭제에 시간이 많이 걸린다.
//			=>	데이터를 추가하거나 삭제하기 위해, 다른 데이터를 옮겨야 함.
//			=>	그러나 순차적인 데이터 추가(끝에 추가)와 삭제(끝부터 삭제)는 빠르다.



// 	LinkedList	: 배열의 단점(크기변경X, 추가삭제시 시간↑)을 보완
//				: 배열과 달리 링크드 리스트는 불연속적으로 존재하는 데이텉를 연결(link)
//
//	1. 데이터의 삭제	: 단 한번의 참조변경으로 가능
//	2. 데이터 추가	: 한번의 Node객체생성과 두 번의 참조변경만으로 가능



//	링크드 리스트					: 연결리스트, 데이터 접근성이 나븜
//	(linked List)	
//
//	더블리 링크드 리스트 				: 이중 연결리스트 , 접근성 향상
//	(doubly linked List)	
//
//	더블리 써큘러 링크드 리스트		: 이중 원형 연결리스트
//	(doubly circular linked List)


// 								< ArrayList VS LinkedList>
//
//	  컬렉션			읽기(접근시간)		추가 / 삭제					비고
// 	ArrayList 			빠르다			   느리다		순차적인 추가삭제는 더 빠르다.
//														비효율적인 메모리사용
//
//	LinkedList			느리다			   빠르다		데이터가 많을수록 접근성이 떨어짐

// ※ 인덱스가 n인 데이터의 주소	=>	배열의 주소 + n * 데이터 타입의 크기

public class Ch11_LinkedList {

	public static void main(String[] args) {
		
		
		
		
	}

}
