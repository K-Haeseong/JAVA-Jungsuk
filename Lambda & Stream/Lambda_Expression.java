// 람다식(Lambda Expression)    : 함수(메서드를)를 간단한 식(expression)으로 표현하는 방법
// 				: 익명 함수(이름이 없는 함수, anonymous function)
//
// 함수 VS 메서드 : 근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
//		  : 함수는 클래스에 독립적, 메서드는 클래스에 종속적
//
// < 람다식 작성하기 >
// 1. 메서드의 이름과 반환타입을 제거하고 ' -> ' 를 블록 {} 앞에 추가한다.
// 2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에';'안 붙임)
// 3. 매개변수의 타입이 추론 가능하면 생략가능(대부분의 경우 생략가능)
//
//
// < 주의사항 >
// 1. 매개변수가 하나인 경우, 괄호() 생략가능(타입이 없을 때만)
// 2. 블록 안의 문장이 하나뿐 일 때, 괄호{} 생략가능(끝에';'안 붙임)
// 3. 단, 하나뿐인 문장이 return문이면 괄호{} 생략불가
//
//
// 람다식은 익명 함수? 익명 객체!			: 랃다식은 익명 함수가 아니라 익명 객체이다. (자바에서는 메서드만 단독으로 존재불가)
// 객체라면 다루어야할 참조변수 필요하지 않나?	: 람다식(익명 객체)을 다루기 위한 참조변수가 필요 O 
// 참조변수의 타입은? 					: 함수형 인터페이스를 선언 한 후 함수형 인터페이스 타입의 참조변수로 람다식 다루면 된다.
//
// * 익명 클래스	: 프로그램에서 일시적으로 한번만 사용되고 버려지는 객체
//			: 클래스 정의와 동시에 객체 생성
//
// * 함수형 인터페이스	: 단 하나의 추상메서드만 선언된 인터페이스
//					: @FunctionalInterface 애너테이션 붙여주기
//					: 람다식(익명객체)을 다루기 위한 참조변수의 타입은 함수형 인터페이스로 한다.
//					: (단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야함)
//					: 메서드 반환 타입이 함수형 인터페이스라면 => 랃다식 반환					


public class Lambda_Expression {

	public static void main(String[] args) {

//		Object obj = (a, b) -> a > b ? a : b;	// 람다식, 익명객체
//		MyFunction2 f = new MyFunction2() {
//			public int max(int a, int b) {		// public 붙이는 이유 = 오버라이딩 규칙 : 접근제어자는 같거나 높게!
//				return a > b ? a : b;
//			}
//		};
		
		// 랃다식을 다루기 위한 참조변수의 타입은 함수형 인터페이스로 한다.
		MyFunction2 f = (a, b) -> a > b ? a : b;	// 람다식. 익명객체
		
		int value = f.max(3,5); // 함수형 인터페이스
		System.out.println("value = " + value);
	}

}

@FunctionalInterface
interface MyFunction2 {
//	public abstract int max(int a, int b);
	int max(int a, int b);
}




